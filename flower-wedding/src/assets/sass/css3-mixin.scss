$default-animation-name: null;
$default-animation-duration: null;
$default-animation-delay: null;
$default-animation-timing-function: null;
$default-animation-iteration-count: null;
$default-animation-direction: null;
$default-animation-fill-mode: null;
$default-animation-play-state: null;
@mixin keyframes($name, $deprecated-prefixes...) {
    $warned: warn-about-useless-prefix-arguments($deprecated-prefixes...);
    @include with-each-prefix(css-animation, $animation-support-threshold) {
        // It would be nice if we could dynamically construct directive names.
        @if $current-prefix==-moz {
            @-moz-keyframes #{$name} {
                @content;
            }
        }
        @if $current-prefix==-webkit {
            @-webkit-keyframes #{$name} {
                @content;
            }
        }
        @if $current-prefix==-o {
            @-o-keyframes #{$name} {
                @content;
            }
        }
        @if $current-prefix==-ms {
            @-ms-keyframes #{$name} {
                @content;
            }
        }
        @if $current-prefix==null {
            @keyframes #{$name} {
                @content;
            }
        }
    }
}

@mixin animation-name($name...) {
    $name: set-arglist-default($name, $default-animation-name);
    @include animation-properties((animation-name: $name));
}

@mixin animation-duration($duration...) {
    $duration: set-arglist-default($duration, $default-animation-duration);
    @include animation-properties((animation-duration: $duration));
}

@mixin animation-iteration-count($count...) {
    $count: set-arglist-default($count, $default-animation-iteration-count);
    @include animation-properties((animation-iteration-count: $count));
}

@mixin animation-direction($direction...) {
    $direction: set-arglist-default($direction, $default-animation-direction);
    @include animation-properties((animation-direction: $direction));
}

@mixin animation-fill-mode($mode...) {
    $mode: set-arglist-default($mode, $default-animation-fill-mode);
    @include animation-properties((animation-fill-mode: $mode));
}

@mixin animation-play-state($state...) {
    $state: set-arglist-default($state, $default-animation-play-state);
    @include animation-properties((animation-play-state: $state));
}

@mixin animation($animation...) {
    $animation: if(length($animation) > 0, $animation, default-animation());
    @include animation-properties((animation: $animation));
}

// transform css3
$default-origin-x: 50%;
$default-origin-y: 50%;
$default-origin-z: 50%;
$default-scale-x: 1.25;
$default-scale-y: $default-scale-x;
$default-scale-z: $default-scale-x;
$default-rotate :45deg;
$default-vector-x: 1;
$default-vector-y: 1;
$default-vector-z: 1;
$default-translate-x: 1em;
$default-translate-y: $default-translate-x;
$default-translate-z: $default-translate-x;
$default-skew-x: 5deg;
$default-skew-y: 5deg;
@mixin apply-origin($origin, $only3d) {
    $capability: if($only3d or length($origin) > 2, transforms3d, transforms2d);
    @include prefixed-properties($capability, $transform-support-threshold, (transform-origin: $origin));
}

@mixin transform-origin($origin-x: $default-origin-x, $origin-y: $default-origin-y, $origin-z: false, $only3d: if($origin-z, true, false)) {
    $origin: unquote("");
    @if $origin-x or $origin-y or $origin-z {
        @if $origin-x {
            $origin: $origin-x;
        }
        @else {
            $origin: 50%;
        }
        @if $origin-y {
            $origin: $origin $origin-y;
        }
        @else {
            @if $origin-z {
                $origin: $origin 50%;
            }
        }
        @if $origin-z {
            $origin: $origin $origin-z;
        }
        @include apply-origin($origin, $only3d);
    }
}

@mixin transform($transform, $only3d: false) {
    $capability: if($only3d, transforms3d, transforms2d);
    @include prefixed-properties($capability, $transform-support-threshold, (transform: $transform));
}

@mixin transform2d($trans) {
    @include transform($trans, false);
}

@mixin transform3d($trans) {
    @include transform($trans, true);
}

@mixin perspective($p) {
    @include prefixed-properties(transforms3d, $transform-support-threshold, (perspective: $p));
}

@mixin perspective-origin($origin: 50%) {
    @include prefixed-properties(transforms3d, $transform-support-threshold, (perspective-origin: $origin));
}

@mixin transform-style($style: preserve-3d) {
    @include prefixed-properties(transforms3d, $transform-support-threshold, (transform-style: $style));
}

@mixin backface-visibility($visibility: hidden) {
    @include prefixed-properties(transforms3d, $transform-support-threshold, (backface-visibility: $visibility));
}

@mixin scale($scale-x: $default-scale-x, $scale-y: $scale-x, $perspective: false, $only3d: false) {
    $trans: scale($scale-x, $scale-y);
    @if $perspective {
        $trans: perspective($perspective) $trans;
    }
    @include transform($trans, $only3d);
}

@mixin scaleX($scale: $default-scale-x, $perspective: false, $only3d: false) {
    $trans: scaleX($scale);
    @if $perspective {
        $trans: perspective($perspective) $trans;
    }
    @include transform($trans, $only3d);
}

@mixin scaleY($scale: $default-scale-y, $perspective: false, $only3d: false) {
    $trans: scaleY($scale);
    @if $perspective {
        $trans: perspective($perspective) $trans;
    }
    @include transform($trans, $only3d);
}

@mixin scaleZ($scale: $default-scale-z, $perspective: false) {
    $trans: scaleZ($scale);
    @if $perspective {
        $trans: perspective($perspective) $trans;
    }
    @include transform3d($trans);
}

@mixin scale3d($scale-x: $default-scale-x, $scale-y: $default-scale-y, $scale-z: $default-scale-z, $perspective: false) {
    $trans: scale3d($scale-x, $scale-y, $scale-z);
    @if $perspective {
        $trans: perspective($perspective) $trans;
    }
    @include transform3d($trans);
}

@mixin rotate($rotate: $default-rotate, $perspective: false, $only3d: false) {
    $trans: rotate($rotate);
    @if $perspective {
        $trans: perspective($perspective) $trans;
    }
    @include transform($trans, $only3d);
}

@mixin rotateZ($rotate: $default-rotate, $perspective: false, $only3d: false) {
    @include rotate($rotate, $perspective, $only3d);
}

@mixin rotateX($rotate: $default-rotate, $perspective: false) {
    $trans: rotateX($rotate);
    @if $perspective {
        $trans: perspective($perspective) $trans;
    }
    @include transform3d($trans);
}

@mixin rotateY($rotate: $default-rotate, $perspective: false) {
    $trans: rotateY($rotate);
    @if $perspective {
        $trans: perspective($perspective) $trans;
    }
    @include transform3d($trans);
}

@mixin rotate3d($vector-x: $default-vector-x, $vector-y: $default-vector-y, $vector-z: $default-vector-z, $rotate: $default-rotate, $perspective: false) {
    $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
    @if $perspective {
        $trans: perspective($perspective) $trans;
    }
    @include transform3d($trans);
}

@mixin translate($translate-x: $default-translate-x, $translate-y: $default-translate-y, $perspective: false, $only3d: false) {
    $trans: translate($translate-x, $translate-y);
    @if $perspective {
        $trans: perspective($perspective) $trans;
    }
    @include transform($trans, $only3d);
}

@mixin translateX($trans-x: $default-translate-x, $perspective: false, $only3d: false) {
    $trans: translateX($trans-x);
    @if $perspective {
        $trans: perspective($perspective) $trans;
    }
    @include transform($trans, $only3d);
}

@mixin translateY($trans-y: $default-translate-y, $perspective: false, $only3d: false) {
    $trans: translateY($trans-y);
    @if $perspective {
        $trans: perspective($perspective) $trans;
    }
    @include transform($trans, $only3d);
}

@mixin translateZ($trans-z: $default-translate-z, $perspective: false) {
    $trans: translateZ($trans-z);
    @if $perspective {
        $trans: perspective($perspective) $trans;
    }
    @include transform3d($trans);
}

@mixin translate3d($translate-x: $default-translate-x, $translate-y: $default-translate-y, $translate-z: $default-translate-z, $perspective: false) {
    $trans: translate3d($translate-x, $translate-y, $translate-z);
    @if $perspective {
        $trans: perspective($perspective) $trans;
    }
    @include transform3d($trans);
}

@mixin skew($skew-x: $default-skew-x, $skew-y: $default-skew-y, $only3d: false) {
    $trans: skew($skew-x, $skew-y);
    @include transform($trans, $only3d);
}

@mixin skewX($skew-x: $default-skew-x, $only3d: false) {
    $trans: skewX($skew-x);
    @include transform($trans, $only3d);
}

@mixin skewY($skew-y: $default-skew-y, $only3d: false) {
    $trans: skewY($skew-y);
    @include transform($trans, $only3d);
}

@mixin create-transform($perspective: false, $scale-x: false, $scale-y: false, $scale-z: false, $rotate-x: false, $rotate-y: false, $rotate-z: false, $rotate3d: false, $trans-x: false, $trans-y: false, $trans-z: false, $skew-x: false, $skew-y: false, $origin-x: false, $origin-y: false, $origin-z: false, $only3d: false) {
    $trans: unquote("");
    // perspective
    @if $perspective {
        $trans: perspective($perspective);
    }
    // scale
    @if $scale-x and $scale-y {
        @if $scale-z {
            $trans: $trans scale3d($scale-x, $scale-y, $scale-z);
        }
        @else {
            $trans: $trans scale($scale-x, $scale-y);
        }
    }
    @else {
        @if $scale-x {
            $trans: $trans scaleX($scale-x);
        }
        @if $scale-y {
            $trans: $trans scaleY($scale-y);
        }
        @if $scale-z {
            $trans: $trans scaleZ($scale-z);
        }
    }
    // rotate
    @if $rotate-x {
        $trans: $trans rotateX($rotate-x);
    }
    @if $rotate-y {
        $trans: $trans rotateY($rotate-y);
    }
    @if $rotate-z {
        $trans: $trans rotateZ($rotate-z);
    }
    @if $rotate3d {
        $trans: $trans rotate3d($rotate3d);
    }
    // translate
    @if $trans-x and $trans-y {
        @if $trans-z {
            $trans: $trans translate3d($trans-x, $trans-y, $trans-z);
        }
        @else {
            $trans: $trans translate($trans-x, $trans-y);
        }
    }
    @else {
        @if $trans-x {
            $trans: $trans translateX($trans-x);
        }
        @if $trans-y {
            $trans: $trans translateY($trans-y);
        }
        @if $trans-z {
            $trans: $trans translateZ($trans-z);
        }
    }
    // skew
    @if $skew-x and $skew-y {
        $trans: $trans skew($skew-x, $skew-y);
    }
    @else {
        @if $skew-x {
            $trans: $trans skewX($skew-x);
        }
        @if $skew-y {
            $trans: $trans skewY($skew-y);
        }
    }
    // apply it!
    @include transform($trans, $only3d);
    @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}

@mixin simple-transform($scale: false, $rotate: false, $trans-x: false, $trans-y: false, $skew-x: false, $skew-y: false, $origin-x: false, $origin-y: false) {
    @include create-transform(false, $scale, $scale, false, false, false, $rotate, false, $trans-x, $trans-y, false, $skew-x, $skew-y, $origin-x, $origin-y, false, false);
}

$transition-support-threshold: $graceful-usage-threshold;
$default-transition-property: all;
$default-transition-duration: 1s;
$default-transition-function: false;
$default-transition-delay: false;
@function is-time($value) {
    @return if(type-of($value)==number, not not index(s ms, unit($value)), false);
}

@function prefixed-for-transition($prefix, $property) {
    @if not $prefix {
        @return $property;
    }
    @if type-of($property)==list or type-of($property)==arglist {
        $new-list: comma-list();
        @each $v in $property {
            $new-list: append($new-list, prefixed-for-transition($prefix, $v));
        }
        @return $new-list;
    }
    @else {
        @if index($transitionable-prefixed-values, $property) {
            @return #{$prefix}-#{$property};
        }
        @else {
            @return $property;
        }
    }
}

@function transition-map($transition) {
    $transition-map: ();
    @each $item in $transition {
        @if is-time($item) {
            @if map-has-key($transition-map, duration) {
                $transition-map: map-merge($transition-map, (delay: $item));
            }
            @else {
                $transition-map: map-merge($transition-map, (duration: $item));
            }
        }
        @else if map-has-key($transition-map, property) {
            $transition-map: map-merge($transition-map, (timing-function: $item));
        }
        @else {
            $transition-map: map-merge($transition-map, (property: $item));
        }
    }
    @return $transition-map;
}

@mixin transition-property($properties...) {
    $properties: set-arglist-default($properties, $default-transition-property);
    @include with-each-prefix(css-transitions, $transition-support-threshold) {
        $props: if($current-prefix, prefixed-for-transition($current-prefix, $properties), $properties);
        @include prefix-prop(transition-property, $props);
    }
}

@mixin transition-duration($durations...) {
    $durations: set-arglist-default($durations, $default-transition-duration);
    @include prefixed-properties(css-transitions, $transition-support-threshold, (transition-duration: $durations));
}

@mixin transition-timing-function($functions...) {
    $functions: set-arglist-default($functions, $default-transition-function);
    @include prefixed-properties(css-transitions, $transition-support-threshold, (transition-timing-function: $functions));
}

@mixin transition-delay($delays...) {
    $delays: set-arglist-default($delays, $default-transition-delay);
    @include prefixed-properties(css-transitions, $transition-support-threshold, (transition-delay: $delays));
}

@mixin single-transition($property: $default-transition-property, $duration: $default-transition-duration, $function: $default-transition-function, $delay: $default-transition-delay) {
    @include transition(compact($property $duration $function $delay));
}

@mixin transition($transitions...) {
    $default: (compact($default-transition-property $default-transition-duration $default-transition-function $default-transition-delay), );
    $transitions: if(length($transitions)==1 and type-of(nth($transitions, 1))==list and list-separator(nth($transitions, 1))==comma, nth($transitions, 1), $transitions);
    $transitions: set-arglist-default($transitions, $default);
    @include with-each-prefix(css-transitions, $transition-support-threshold) {
        $delays: comma-list();
        $transitions-without-delays: comma-list();
        $transitions-with-delays: comma-list();
        $has-delays: false;
        // This block can be made considerably simpler at the point in time that
        // we no longer need to deal with the differences in how delays are treated.
        @each $transition in $transitions {
            // Declare initial values for transition
            $transition: transition-map($transition);
            $property: map-get($transition, property);
            $duration: map-get($transition, duration);
            $timing-function: map-get($transition, timing-function);
            $delay: map-get($transition, delay);
            // Parse transition string to assign values into correct variables
            $has-delays: $has-delays or $delay;
            @if $current-prefix==-webkit {
                // Keep a list of delays in case one is specified
                $delays: append($delays, if($delay, $delay, 0s));
                $transitions-without-delays: append($transitions-without-delays, prefixed-for-transition($current-prefix, $property) $duration $timing-function);
            }
            @else {
                $transitions-with-delays: append($transitions-with-delays, prefixed-for-transition($current-prefix, $property) $duration $timing-function $delay);
            }
        }
        @if $current-prefix==-webkit {
            @include prefix-prop(transition, $transitions-without-delays);
            @if $has-delays {
                @include prefix-prop(transition-delay, $delays);
            }
        }
        @else if $current-prefix {
            @include prefix-prop(transition, $transitions-with-delays);
        }
        @else {
            transition: $transitions-with-delays;
        }
    }
}